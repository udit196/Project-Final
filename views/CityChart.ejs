<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>City-Wise Emissions</title>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body>
    <%- include('navbar') %>
    <h2>City-Wise Emissions</h2>
  <!-- Search Bar and Dropdown -->
      <label for="stateSelect" class="form-label">Select State:</label>
      <select id="stateSelect" class="form-select">
        <option value="">-- Select a State --</option>
        <!-- Options will be dynamically loaded -->
      </select>
  <h1>City-Wise Emissions (Pie Chart)</h1>
  <canvas id="emissionsPieChart" width="400" height="400"></canvas>

  <script>

    let cityChartInstance = null; // Global variable to store the chart instance

    // Event listener for state selection
    document.getElementById('stateSelect').addEventListener('change', (event) => {
      const selectedState = event.target.value;
      console.log(1);
      renderPieChart(selectedState);
    });

    // Load the state dropdown when the page loads
    document.addEventListener('DOMContentLoaded', loadStateDropdown);

    // Function to fetch the list of states and populate the dropdown
    async function loadStateDropdown() {
      try {
        const response = await fetch('/available-states'); // Backend endpoint to fetch available states
        const states = await response.json();

        const stateSelect = document.getElementById('stateSelect');
        states.forEach(state => {
          const option = document.createElement('option');
          option.value = state.name;
          option.textContent = state.name;
          stateSelect.appendChild(option);
        });
      } catch (err) {
        console.error("Error loading states:", err);
      }
    }
    // Function to fetch emissions data and render the pie chart
    async function renderPieChart(stateName) {
    try {
        // Fetch state emissions data from the backend
        const response = await fetch(`/city-emissions?state=${encodeURIComponent(stateName)}`);
        const emissionsData = await response.json();

        // Extract state names and their emissions
        const cityNames = emissionsData.map(data => data.name);
        const emissionValues = emissionsData.map(data => data.totalYearlyEmissions);

        // Get the canvas context for the chart
        const ctx = document.getElementById('emissionsPieChart').getContext('2d');

         // Destroy the previous chart instance if it exists
        if (cityChartInstance) {
          cityChartInstance.destroy();
        }

        // Render the pie chart using Chart.js
        cityChartInstance = new Chart(ctx, {
        type: 'pie',
        data: {
            labels: cityNames, // State names as labels
            datasets: [{
            label: 'City-wise Emissions',
            data: emissionValues, // Emissions data as chart values
            backgroundColor: [
                '#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF',
                '#FF9F40', '#E7E9ED', '#F7464A', '#46BFBD', '#FDB45C'
            ],
            hoverOffset: 4,
            }],
        },
        options: {
            plugins: {
            legend: {
                position: 'top',
            },
            tooltip: {
                enabled: true,
            },
            },
        },
        });
    } catch (err) {
        console.error("Error rendering pie chart:", err);
    }
    }

    // Render the chart when the page loads
    document.addEventListener('DOMContentLoaded', renderPieChart(statename));

  </script>
</body>
</html>